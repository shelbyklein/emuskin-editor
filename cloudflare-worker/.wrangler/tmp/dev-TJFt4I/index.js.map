{
  "version": 3,
  "sources": ["../bundle-CB1Nck/checked-fetch.js", "../../../src/index.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-CB1Nck/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-CB1Nck/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/shelbyklein/Sites/emuskin-generator/cloudflare-worker/.wrangler/tmp/dev-TJFt4I",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "/**\n * Cloudflare Worker for handling R2 image uploads\n * Provides presigned URLs and manages image storage\n */\n\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n    \n    // Always handle CORS\n    const corsHeaders = getCORSHeaders(request, env);\n    \n    // Handle CORS preflight\n    if (request.method === \"OPTIONS\") {\n      return new Response(null, {\n        status: 204,\n        headers: corsHeaders\n      });\n    }\n\n    try {\n      // Route handling\n      if (url.pathname === \"/upload-url\" && request.method === \"POST\") {\n        return await handleUploadUrl(request, env, corsHeaders);\n      }\n      \n      if (url.pathname.startsWith(\"/upload/\") && request.method === \"PUT\") {\n        const uploadId = url.pathname.split('/')[2];\n        return await handleUpload(request, env, uploadId, corsHeaders);\n      }\n      \n      if (url.pathname === \"/delete\" && request.method === \"DELETE\") {\n        return await handleDelete(request, env, corsHeaders);\n      }\n      \n      if (url.pathname === \"/list\" && request.method === \"GET\") {\n        return await handleList(request, env, corsHeaders);\n      }\n      \n      return new Response(\"Not Found\", { \n        status: 404,\n        headers: corsHeaders\n      });\n    } catch (error) {\n      console.error(\"Worker error:\", error);\n      return new Response(JSON.stringify({ \n        error: error.message || \"Internal Server Error\" \n      }), {\n        status: 500,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...corsHeaders\n        }\n      });\n    }\n  }\n};\n\n/**\n * Get CORS headers\n */\nfunction getCORSHeaders(request, env) {\n  const origin = request.headers.get(\"Origin\") || \"\";\n  const allowedOrigins = (env.ALLOWED_ORIGINS || \"\").split(\",\").map(o => o.trim());\n  \n  // Check if origin is allowed\n  if (allowedOrigins.includes(origin) || allowedOrigins.includes(\"*\")) {\n    return {\n      \"Access-Control-Allow-Origin\": origin || \"*\",\n      \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n      \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n      \"Access-Control-Max-Age\": \"86400\",\n      \"Access-Control-Allow-Credentials\": \"true\"\n    };\n  }\n  \n  // Return minimal headers if origin not allowed\n  return {\n    \"Access-Control-Allow-Origin\": allowedOrigins[0] || \"null\",\n    \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n    \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n  };\n}\n\n/**\n * Generate a presigned URL for uploading\n */\nasync function handleUploadUrl(request, env, corsHeaders) {\n  try {\n    const body = await request.json();\n    const { projectId, fileName, fileType, imageType = \"background\", orientation = \"portrait\" } = body;\n    \n    // Validate inputs\n    if (!projectId || !fileName || !fileType) {\n      return new Response(JSON.stringify({ \n        error: \"Missing required fields: projectId, fileName, fileType\" \n      }), {\n        status: 400,\n        headers: { \n          \"Content-Type\": \"application/json\", \n          ...corsHeaders \n        }\n      });\n    }\n\n    // Validate file type\n    const allowedTypes = [\"image/png\", \"image/jpeg\", \"image/jpg\"];\n    if (!allowedTypes.includes(fileType)) {\n      return new Response(JSON.stringify({ \n        error: \"Invalid file type. Allowed: \" + allowedTypes.join(\", \") \n      }), {\n        status: 400,\n        headers: { \n          \"Content-Type\": \"application/json\", \n          ...corsHeaders \n        }\n      });\n    }\n\n    // Generate unique key\n    const timestamp = Date.now();\n    const sanitizedFileName = fileName.replace(/[^a-zA-Z0-9.-]/g, \"_\");\n    const key = `projects/${projectId}/${imageType}/${orientation}/${timestamp}-${sanitizedFileName}`;\n\n    // Generate upload ID\n    const uploadId = crypto.randomUUID();\n    \n    // Store upload metadata in KV (if available)\n    if (env.IMAGE_METADATA) {\n      await env.IMAGE_METADATA.put(\n        `upload:${uploadId}`,\n        JSON.stringify({\n          key,\n          projectId,\n          fileType,\n          imageType,\n          orientation,\n          timestamp,\n          expires: Date.now() + 300000 // 5 minutes\n        }),\n        { expirationTtl: 300 } // Expire after 5 minutes\n      );\n    }\n\n    // Get the worker URL from the request\n    const workerUrl = new URL(request.url).origin;\n\n    return new Response(JSON.stringify({\n      uploadUrl: `${workerUrl}/upload/${uploadId}`,\n      publicUrl: `${env.R2_PUBLIC_URL || 'https://pub-unknown.r2.dev'}/${key}`,\n      key,\n      uploadId,\n      expires: new Date(Date.now() + 300000).toISOString()\n    }), {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...corsHeaders\n      }\n    });\n  } catch (error) {\n    console.error(\"Error in handleUploadUrl:\", error);\n    return new Response(JSON.stringify({ \n      error: \"Failed to generate upload URL: \" + error.message \n    }), {\n      status: 500,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...corsHeaders\n      }\n    });\n  }\n}\n\n/**\n * Handle actual file upload\n */\nasync function handleUpload(request, env, uploadId, corsHeaders) {\n  try {\n    // Get metadata if KV is available\n    let metadata = null;\n    if (env.IMAGE_METADATA) {\n      const metadataStr = await env.IMAGE_METADATA.get(`upload:${uploadId}`);\n      if (!metadataStr) {\n        return new Response(JSON.stringify({ \n          error: \"Invalid or expired upload ID\" \n        }), {\n          status: 403,\n          headers: { \n            \"Content-Type\": \"application/json\", \n            ...corsHeaders \n          }\n        });\n      }\n      metadata = JSON.parse(metadataStr);\n      \n      // Check expiration\n      if (metadata.expires < Date.now()) {\n        return new Response(JSON.stringify({ \n          error: \"Upload URL expired\" \n        }), {\n          status: 403,\n          headers: { \n            \"Content-Type\": \"application/json\", \n            ...corsHeaders \n          }\n        });\n      }\n    }\n\n    // Get file data\n    const blob = await request.blob();\n    \n    // Validate file size\n    const maxSize = parseInt(env.MAX_FILE_SIZE || \"10485760\");\n    if (blob.size > maxSize) {\n      return new Response(JSON.stringify({ \n        error: `File too large. Maximum size: ${maxSize / 1048576}MB` \n      }), {\n        status: 413,\n        headers: { \n          \"Content-Type\": \"application/json\", \n          ...corsHeaders \n        }\n      });\n    }\n\n    // Upload to R2\n    const key = metadata ? metadata.key : `uploads/${uploadId}`;\n    await env.R2_BUCKET.put(key, blob, {\n      httpMetadata: {\n        contentType: request.headers.get(\"Content-Type\") || metadata?.fileType || \"application/octet-stream\"\n      },\n      customMetadata: metadata ? {\n        projectId: metadata.projectId,\n        imageType: metadata.imageType,\n        orientation: metadata.orientation,\n        uploadId\n      } : {}\n    });\n\n    // Clean up metadata\n    if (env.IMAGE_METADATA && metadata) {\n      await env.IMAGE_METADATA.delete(`upload:${uploadId}`);\n    }\n\n    return new Response(JSON.stringify({\n      success: true,\n      key,\n      publicUrl: `${env.R2_PUBLIC_URL || 'https://pub-unknown.r2.dev'}/${key}`\n    }), {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...corsHeaders\n      }\n    });\n  } catch (error) {\n    console.error(\"Error in handleUpload:\", error);\n    return new Response(JSON.stringify({ \n      error: \"Upload failed: \" + error.message \n    }), {\n      status: 500,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...corsHeaders\n      }\n    });\n  }\n}\n\n/**\n * Delete an image\n */\nasync function handleDelete(request, env, corsHeaders) {\n  try {\n    const { key } = await request.json();\n    \n    if (!key) {\n      return new Response(JSON.stringify({ \n        error: \"Missing key parameter\" \n      }), {\n        status: 400,\n        headers: { \n          \"Content-Type\": \"application/json\", \n          ...corsHeaders \n        }\n      });\n    }\n\n    await env.R2_BUCKET.delete(key);\n\n    return new Response(JSON.stringify({ \n      success: true,\n      message: \"Image deleted successfully\"\n    }), {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...corsHeaders\n      }\n    });\n  } catch (error) {\n    console.error(\"Error in handleDelete:\", error);\n    return new Response(JSON.stringify({ \n      error: \"Delete failed: \" + error.message \n    }), {\n      status: 500,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...corsHeaders\n      }\n    });\n  }\n}\n\n/**\n * List images for a project\n */\nasync function handleList(request, env, corsHeaders) {\n  try {\n    const url = new URL(request.url);\n    const projectId = url.searchParams.get(\"projectId\");\n    \n    if (!projectId) {\n      return new Response(JSON.stringify({ \n        error: \"Missing projectId parameter\" \n      }), {\n        status: 400,\n        headers: { \n          \"Content-Type\": \"application/json\", \n          ...corsHeaders \n        }\n      });\n    }\n\n    const prefix = `projects/${projectId}/`;\n    const list = await env.R2_BUCKET.list({ prefix, limit: 1000 });\n\n    const images = list.objects.map(obj => ({\n      key: obj.key,\n      size: obj.size,\n      uploaded: obj.uploaded,\n      publicUrl: `${env.R2_PUBLIC_URL || 'https://pub-unknown.r2.dev'}/${obj.key}`,\n      metadata: obj.customMetadata\n    }));\n\n    return new Response(JSON.stringify({ \n      images,\n      truncated: list.truncated,\n      count: images.length\n    }), {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...corsHeaders\n      }\n    });\n  } catch (error) {\n    console.error(\"Error in handleList:\", error);\n    return new Response(JSON.stringify({ \n      error: \"List failed: \" + error.message \n    }), {\n      status: 500,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...corsHeaders\n      }\n    });\n  }\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/shelbyklein/Sites/emuskin-generator/cloudflare-worker/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/shelbyklein/Sites/emuskin-generator/cloudflare-worker/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/shelbyklein/Sites/emuskin-generator/cloudflare-worker/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/shelbyklein/Sites/emuskin-generator/cloudflare-worker/src/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/shelbyklein/Sites/emuskin-generator/cloudflare-worker/.wrangler/tmp/bundle-CB1Nck/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/shelbyklein/Sites/emuskin-generator/cloudflare-worker/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/shelbyklein/Sites/emuskin-generator/cloudflare-worker/.wrangler/tmp/bundle-CB1Nck/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/shelbyklein/Sites/emuskin-generator/cloudflare-worker/.wrangler/tmp/bundle-CB1Nck/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
